#!/usr/bin/env python
from subprocess import Popen, PIPE, check_output
from crypt import crypt
import random
import string
import os.path
import gtk
import sys
import os
import gettext
from collections import OrderedDict

gettext.textdomain('freepto-passwords-changer')
_ = gettext.gettext

_SALT_CHARS = string.ascii_letters + string.digits + './'


def check_user():
    """ Only root can do that! """
    uid = os.getuid()
    if not uid == 0:
        print("Only root can do that!")
        sys.exit(1)


class UserChanger(object):
    '''
    this is a bit of a "sub-application"; encapsulates both the UI and the
    functions about changing a user password
    '''
    def __init__(self, username='paranoid'):
        self.username = username

    def _crypt_salt(self, length=16):
        random.seed()
        return '$6$' + ''.join(
            (random.choice(_SALT_CHARS) for _ in xrange(length)))

    def _crypt_password(self, password):
        """ Return crypted password """
        crypted_password = crypt(password, self._crypt_salt())
        return crypted_password

    def change_password(self, password):
        """ Change user password """
        shadow_password = self._crypt_password(password)
        p = Popen(['/usr/sbin/usermod', '-p', shadow_password, self.username])
        p.communicate()
        return p.returncode == 0

    def get_frame(self):
        frame = UserFrame(self.change_password)
        return frame

    def get_button(self):
        btn = gtk.Button('User password')
        btn.set_image(gtk.image_new_from_stock(gtk.STOCK_EXECUTE,
                                               gtk.ICON_SIZE_DIALOG))
        return btn


class DiskChanger(object):
    def __init__(self, device=None):
        if device is None:
            self.device = self.get_freepto_disk()
        else:
            self.device = device

    def get_freepto_disk(self):
        """ Return persistence device """
        try:
            disk = check_output(
                ['check-persistence', 'get-root-device']
            ).strip()
            return disk + str(2)
        except Exception as exc:
            print "Error: check-persistence not found"
            raise exc

    def change_passphrase(self, old_passwd, new_passwd):
        """ Change the persistence passphrase """
        p = Popen(['cryptsetup', 'luksChangeKey', self.device],
                  stdin=PIPE, stdout=PIPE, stderr=PIPE)
        p.communicate("%s\n%s" % (old_passwd, new_passwd))
        return p.returncode == 0

    def get_frame(self):
        frame = DiskFrame(self.change_passphrase)
        return frame

    def get_button(self):
        b_disk = gtk.Button('Change disk encryption passphrase')
        b_disk.set_image(gtk.image_new_from_stock(gtk.STOCK_FLOPPY,
                                                  gtk.ICON_SIZE_DIALOG))
        return b_disk


class UserFrame(gtk.Frame):
    '''This is a self-contained frame to handle user password change'''
    description = 'User password'

    def __init__(self, changer):
        gtk.Frame.__init__(self, "Change user password")
        self.changer = changer

        self.box = gtk.Table(3, 2, True)
        self.add(self.box)

        self.new_user_description = gtk.Label("New password")
        self.new_user_input = gtk.Entry()
        self.new_user_input.set_visibility(False)

        self.box.attach(self.new_user_description, 0, 1, 0, 1)
        self.box.attach(self.new_user_input, 1, 2, 0, 1)

        self.repeat_user_description = gtk.Label("Repeat password")
        self.repeat_user_input = gtk.Entry()
        self.repeat_user_input.set_visibility(False)

        self.box.attach(self.repeat_user_description, 0, 1, 1, 2)
        self.box.attach(self.repeat_user_input, 1, 2, 1, 2)

        self.save = gtk.Button('save', stock=gtk.STOCK_SAVE)
        self.repeat_user_input.connect('activate', self.save_settings,
                                       None)
        self.save.connect('clicked', self.save_settings, None)
        self.box.attach(self.save, 0, 1, 2, 3)
        self.show_all()

    def save_settings(self, widget, data=None):
        if self.new_user_input.get_text() != "":
            if self.new_user_input.get_text() != \
                    self.repeat_user_input.get_text():
                show_error("Passwords are different.")
            else:
                if self.changer(self.new_user_input.get_text()):
                    show_info("Password changed!")
                    self.new_user_input.set_text('')
                    self.repeat_user_input.set_text('')
                else:
                    show_error("An error occurred while changing password."
                               + " Please report the bug.")


class DiskFrame(gtk.Frame):
    '''This is a self-contained frame to handle disk password change'''
    description = 'Disk password'

    def __init__(self, changer):
        gtk.Frame.__init__(self, "Change Freepto passphrase")
        self.changer = changer
        self.box = gtk.Table(4, 2, True)
        self.add(self.box)

        self.disk_description = gtk.Label("Current passphrase")
        self.disk_input = gtk.Entry()
        self.disk_input.set_visibility(False)

        self.box.attach(self.disk_description, 0, 1, 0, 1)
        self.box.attach(self.disk_input, 1, 2, 0, 1)

        self.new_disk_description = gtk.Label("New passphrase")
        self.new_disk_input = gtk.Entry()
        self.new_disk_input.set_visibility(False)

        self.box.attach(self.new_disk_description, 0, 1, 1, 2)
        self.box.attach(self.new_disk_input, 1, 2, 1, 2)

        self.repeat_disk_description = gtk.Label("Repeat passphrase")
        self.repeat_disk_input = gtk.Entry()
        self.repeat_disk_input.set_visibility(False)

        self.box.attach(self.repeat_disk_description, 0, 1, 2, 3)
        self.box.attach(self.repeat_disk_input, 1, 2, 2, 3)

        self.save = gtk.Button('save', stock=gtk.STOCK_SAVE)
        self.save.connect('clicked', self.save_settings, None)
        self.box.attach(self.save, 0, 1, 3, 4)
        self.show_all()

    def save_settings(self, widget, data=None):
        if self.new_disk_input != "" and self.disk_input != "":
            disk_passwd = self.disk_input.get_text()
            new_disk_passwd = self.new_disk_input.get_text()
            repeat_disk_passwd = self.repeat_disk_input.get_text()
            if new_disk_passwd != repeat_disk_passwd:
                show_error("Passphrases are different.")
            else:
                if self.changer(disk_passwd, new_disk_passwd):
                    show_info("Disk passphrase changed!")
                    self.new_disk_input.set_text('')
                    self.repeat_disk_input.set_text('')
                    self.disk_input.set_text('')
                else:
                    show_error("An error occurred while changing disk"
                               + " passphrase. Make sure your current"
                               + " disk passphrase is right.")


def show_info(text):
    """ Show new gtk window with info style """
    dialog = gtk.MessageDialog(buttons=gtk.BUTTONS_OK)
    dialog.set_markup(text)
    dialog.connect('response', lambda x, _: dialog.destroy())
    dialog.show()


def show_error(text):
    """ Show new gtk window with error style """
    dialog = gtk.MessageDialog(type=gtk.MESSAGE_ERROR,
                               buttons=gtk.BUTTONS_OK)
    dialog.set_markup(text)
    dialog.connect('response', lambda x, _: dialog.destroy())
    dialog.show()


class ModularGreeter(gtk.Window):
    def __init__(self, modules):
        gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)

        self.box = box = gtk.HBox(False, 0)
        self.modules = modules
        for mod in modules:
            btn = modules[mod].get_button()
            box.pack_start(btn)
            btn.connect('clicked', self.btn_click, mod)

        self.add(box)
        self.show_all()

        self.connect('destroy', self.destroy)
        self.set_title('Freepto Passwords Changer')

    def btn_click(self, widget, mod_name):
        frame = self.modules[mod_name].get_frame()
        self.box.hide()
        self.remove(self.box)
        self.set_title('%s - %s' % (self.get_title(), frame.description))
        self.add(frame)
        frame.show()

    def destroy(self, widget, data=None):
        gtk.main_quit()


if __name__ == '__main__':
    check_user()
    modules = OrderedDict()
    modules['user'] = UserChanger('paranoid')
    modules['disk'] = DiskChanger()

    m = ModularGreeter(modules)
    gtk.main()

# vim: set ts=4 sw=4 et:
